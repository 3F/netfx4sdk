{
  "Header": {
    "_": [
      " This file for vsSolutionBuildEvent ",
      " https://github.com/3F/vsSolutionBuildEvent "
    ],
    "Compatibility": "0.12.4"
  },
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "Def",
      "Caption": "Define variables etc. ...",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[$(revDeltaBase = \"2021/12/30\")]",
          "#[$(revDeltaMin  = $([System.Math]::Pow(10, 3)))]",
          "#[$(revDeltaMax  = 65534)]",
          "",
          "#[var pVer = #[File get(\".version\")]]",
          "",
          "#[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "#[var revBuild  = #[$(",
          "    [System.TimeSpan]::FromTicks('$(",
          "        [MSBuild]::Subtract($(tNow), $(tBase))",
          "    )')",
          "    .TotalMinutes.ToString('0')",
          ")]]",
          "                     ",
          "#[var revBuild  = #[$(",
          "",
          " [MSBuild]::Add(",
          "     $(revDeltaMin), ",
          "     $([MSBuild]::Modulo(",
          "         $(revBuild), ",
          "         $([MSBuild]::Subtract(",
          "             $(revDeltaMax), $(revDeltaMin)",
          "          ))",
          "      ))",
          "  )",
          "  ",
          ")]]",
          "",
          "#[$(netfx4sdkdVersion = \"$(pVer).$(revBuild)\")]",
          "",
          "#[\" ",
          "    Checking of the git folder to define sha1, branch name, etc.",
          "\"]",
          "#[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    ",
          "    #[$(netfx4sdkdVersion = \"$(netfx4sdkdVersion)+$(bSha1)\")]",
          "}]",
          "",
          "",
          "",
          "",
          "#[$(dbin = 'bin\\Release')]",
          "#[$(odir = \"$(dbin)/raw\")]",
          "",
          "#[IO delete.directory(\"$(dbin)\", true)]",
          "{",
          "    #[IO copy.directory(\"\", \"$(dbin)\", true)]",
          "    #[IO copy.directory(\"\", \"$(odir)\", true)]",
          "}",
          "",
          "#[$(cmdCore = \"$(odir)/netfx4sdk.cmd\")]",
          "#[IO copy.file(\"netfx4sdk.cmd\", \"$(cmdCore)\", true)]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActCompile",
      "Caption": "Compile",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeCSharp, vsSolutionBuildEvent",
        "Type": "CSharp",
        "References": [
          "System",
          "System.Linq",
          "System.Core"
        ],
        "SmartReferences": true,
        "GenerateInMemory": true,
        "TreatWarningsAsErrors": false,
        "WarningLevel": 4,
        "FilesMode": false,
        "CachingBytecode": false,
        "LastTime": 0,
        "Command__": [
          "/*",
          "    !!! This is a modified version taken from old hMSBuild/GetNuTool projects ",
          "    ",
          "    https://github.com/3F/GetNuTool",
          "    Copyright (c) 2015-2018,2020  Denis Kuzmin <x-3F@outlook.com>",
          "    ",
          "    https://github.com/3F/hMSBuild",
          "    Copyright (c) 2017-2020  Denis Kuzmin <x-3F@outlook.com> github/3F",
          "    ",
          "    A quick/dirty adapting ... well, yes <_<",
          "    TODO:",
          "*/",
          "",
          "using System;",
          "using System.IO;",
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using System.Text;",
          "using System.Text.RegularExpressions;",
          "using ICommand = net.r_eg.vsSBE.Actions.ICommand;",
          "using ISolutionEvent = net.r_eg.vsSBE.Events.ISolutionEvent;",
          "",
          "namespace vsSolutionBuildEvent",
          "{",
          "    public class CSharpMode",
          "    {",
          "        public static int Init(ICommand cmd, ISolutionEvent evt)",
          "        {",
          "            string core     = @\"$(cmdCore)\";",
          "            string output   = @\"$(cmdCore)\";",
          "            string content  = null;",
          "            ",
          "            // -",
          "            ",
          "            Func<char[], int, Func<int, bool>, string[]> gencomb = (char[] _dict, int _size, Func<int, bool> _rule0) =>",
          "            {",
          "                var combination = new char[_size];",
          "                var set         = new List<string>((int)Math.Pow(_dict.Length, _size));",
          "",
          "                int pos = 0;",
          "                Action generator = null;",
          "                generator = () =>",
          "                {",
          "                    for(int i = 0, lim = _size - 1; i < _dict.Length; ++i)",
          "                    {",
          "                        if(pos == 0 && !_rule0(i)) {",
          "                            continue;",
          "                        }",
          "",
          "                        if(pos < lim) {",
          "                            combination[pos] = _dict[i];",
          "                            ++pos;",
          "                            generator();",
          "                            --pos;",
          "                        }",
          "                        else {",
          "                            combination[pos] = _dict[i];",
          "                            set.Add(new String(combination.ToArray()));",
          "                        }",
          "                    }",
          "                };",
          "",
          "                generator();",
          "                return set.ToArray();",
          "            };",
          "",
          "            var variables = new Dictionary<string, string>();",
          "",
          "            var cdict = new[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',",
          "                                'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',",
          "                                'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',",
          "                                '4', '5', '6', '7', '8', '9', '_' };",
          "",
          "            var vdict = gencomb(cdict, 2, (int i) => { return char.IsLetter(cdict[i]) || cdict[i] == '_'; });",
          "",
          "            // to skip processing for:",
          "            var exvar = new[] { \"__p_call\" };",
          "",
          "            const string VNAME  = \"[a-z_][a-z_0-9]+\";",
          "            const string VERS   = \"$(netfx4sdkdVersion)\";",
          "            const string APP    = \"netfx4sdk\";",
          "            using(StreamReader reader = new StreamReader(core, System.Text.Encoding.UTF8, true))",
          "            {",
          "                content = reader.ReadToEnd();                ",
          "            }",
          "                ",
          "            /* set /a ERROR_ codes */",
          "            ",
          "            var errorsCodes = new Dictionary<string, string>();",
          "            content = Regex.Replace",
          "            (",
          "                content,",
          "                @\"set\\s+\\/a\\s+(?'k'ERROR_[^= ]+)\\s*=\\s*(?'v'\\d+)\", ",
          "                (Match m) =>",
          "                {",
          "                    errorsCodes[m.Groups[\"k\"].Value] = m.Groups[\"v\"].Value;",
          "                    return String.Empty;",
          "                }",
          "            );",
          "            ",
          "            foreach(var err in errorsCodes)",
          "            {",
          "                content = Regex.Replace(",
          "                    content, ",
          "                    String.Format(\"({1}{0}{1}|{2}{0}{2})\", err.Key, \"%\", \"!\"), ",
          "                    err.Value",
          "                );",
          "            }",
          "            ",
          "            ",
          "            /* Shorten variables & labels */",
          "",
          "            uint uniqVars = 0;",
          "            content = Regex.Replace",
          "            (",
          "                content,",
          "                @\"(?'def' ",
          "                    set\\s+?",
          "                     (?:\\/\\S\\s+?)?",
          "                     (?:\"\"\\s*?)?",
          "                  )",
          "                  (?'name'\"+ VNAME + @\")",
          "                  (?'lim'\\s?\\S?=)\", // aq+=1,.. TODO: aq=aq+1 ; aq=1+aq ...",
          "                (Match m) =>",
          "                {",
          "                    var def     = m.Groups[\"def\"].Value;",
          "                    var vname   = m.Groups[\"name\"].Value;",
          "                    var lim     = m.Groups[\"lim\"].Value;",
          "",
          "                    if(exvar.Contains(vname)) {",
          "                        return m.Groups[0].Value;",
          "                    }",
          "",
          "                    if(variables.ContainsKey(vname)) {",
          "                        return def + variables[vname] + lim;",
          "                    }",
          "",
          "                    if(uniqVars + 1 > vdict.Length) {",
          "                        throw new OverflowException(\"vdict does not contain data for new vars\");",
          "                    }",
          "                    variables[vname] = vdict[uniqVars++];",
          "                    return def + variables[vname] + lim;",
          "                },",
          "                RegexOptions.IgnorePatternWhitespace | RegexOptions.IgnoreCase",
          "            );",
          "",
          "            // call :proc p1 p2 ...",
          "            content = Regex.Replace",
          "            (",
          "                content,",
          "                @\"(?'def'call\\s+:\"+ VNAME + @\"\\s)(?'args'.+?)(?'eol'&|\\r\\n)\", ",
          "                (Match m) =>",
          "                {",
          "                    var def     = m.Groups[\"def\"].Value;",
          "                    var cargs   = m.Groups[\"args\"].Value;",
          "                    var eol     = m.Groups[\"eol\"].Value;",
          "",
          "                    return def + Regex.Replace",
          "                    (",
          "                        cargs,",
          "                        @\"(?'split'^|\\s)(?:(?'str'\"\".+?\"\")|(?'name'\" + VNAME + \"))\",",
          "                        (Match _m) =>",
          "                        {",
          "                            var split = _m.Groups[\"split\"].Value;",
          "                            ",
          "                            if(_m.Groups[\"str\"].Success) {",
          "                                return split + _m.Groups[\"str\"].Value;",
          "                            }",
          "                            ",
          "                            var vname = _m.Groups[\"name\"].Value;",
          "",
          "                            if(exvar.Contains(vname)) {",
          "                                return split + vname;",
          "                            }",
          "",
          "                            if(variables.ContainsKey(vname)) {",
          "                                return split + variables[vname];",
          "                            }",
          "",
          "                            if(uniqVars + 1 > vdict.Length) {",
          "                                throw new OverflowException(\"vdict does not contain data for new vars\");",
          "                            }",
          "                            variables[vname] = vdict[uniqVars++];",
          "                            return split + variables[vname];",
          "                        },",
          "                        RegexOptions.IgnoreCase | RegexOptions.Multiline",
          "                    ) + eol;",
          "                },",
          "                RegexOptions.IgnoreCase",
          "            );",
          "",
          "            // %name... & !name...",
          "            content = Regex.Replace",
          "            (",
          "                content,",
          "                @\"(?'def'(?:[%!]|\\sdefined\\s+))(?'name'\"+ VNAME + \")\", ",
          "                (Match m) =>",
          "                {",
          "                    var def     = m.Groups[\"def\"].Value;",
          "                    var vname   = m.Groups[\"name\"].Value;",
          "",
          "                    if(!variables.ContainsKey(vname)) {",
          "                        return def + vname;",
          "                    }",
          "                    return def + variables[vname];",
          "                },",
          "                RegexOptions.IgnoreCase",
          "            );",
          "            ",
          "            // labels",
          "            content = Regex.Replace",
          "            (",
          "                content,",
          "                @\"(?'def'call\\s*:|^\\s*:|goto\\s*:?)(?'label'\" + VNAME + @\")(?'eol'\\s|\\r\\n)\", ",
          "                (Match m) =>",
          "                {",
          "                    var def     = m.Groups[\"def\"].Value;",
          "                    var label   = m.Groups[\"label\"].Value;",
          "                    var eol     = m.Groups[\"eol\"].Value;",
          "",
          "                    if(variables.ContainsKey(label)) {",
          "                        return def + variables[label] + eol;",
          "                    }",
          "",
          "                    if(uniqVars + 1 > vdict.Length) {",
          "                        throw new OverflowException(\"vdict does not contain data for new labels\");",
          "                    }",
          "                    variables[label] = vdict[uniqVars++];",
          "                    return def + variables[label] + eol;",
          "                },",
          "                RegexOptions.IgnoreCase | RegexOptions.Multiline",
          "            );",
          "",
          "",
          "            /* exit/B */",
          "",
          "            content = Regex.Replace(content, @\"exit\\s*\\/B\\s*(?'code'\\d+)?\\s*?\", (Match m) => ",
          "            {",
          "                string ret  = \"exit/B \";",
          "                string code = m.Groups[\"code\"].Value;",
          "",
          "                if(m.Groups[\"code\"].Success) {",
          "                    // 'exit /B 0' is not equal to 'exit /B' - it will pass the latest raised code i.e. without changing it.",
          "                    return ret + code;",
          "                }",
          "                return ret;",
          "            },",
          "            RegexOptions.IgnoreCase);",
          "",
          "",
          "            /* pseudo arguments from labels */",
          "",
          "            content = Regex.Replace(content, @\"^\\s*(?'label':\" + VNAME + @\").*?\\r\\n\", (Match m) => ",
          "            {",
          "                return m.Groups[\"label\"].Value + \"\\r\\n\";",
          "            },",
          "            RegexOptions.IgnoreCase | RegexOptions.Multiline);",
          "",
          "",
          "            /* A common rules */",
          "            ",
          "            //content = Regex.Replace(content, @\"(?:rem|::)\\s.*[\\r\\n]*\", \"\");",
          "",
          "            content = Regex.Replace(content, @\"(^\\s*?(?:rem|::)\\s+)(?'data'.*?)\\r\\n\", (Match m) =>",
          "            {",
          "                var data = m.Groups[\"data\"].Value;",
          "                ",
          "                if(!data.StartsWith(\"Copyright\") ",
          "                    && !data.StartsWith(\"GetNuTool\") ",
          "                    && !data.StartsWith(\"netfx4sdk\") ",
          "                    && !data.StartsWith(\"hMSBuild\") ",
          "                    && !data.StartsWith(\"http\")",
          "                    && !data.StartsWith(\"---\"))",
          "                {",
          "                    return String.Empty;",
          "                }",
          "",
          "                if(data.Contains(\"/issues\")) {",
          "                    return String.Empty;",
          "                }",
          "",
          "                return m.Groups[0].Value;",
          "            }, ",
          "            RegexOptions.IgnoreCase | RegexOptions.Multiline);",
          "",
          "            content = Regex.Replace(content, @\"(\\r\\n){2,}\", \"$1\");",
          "            content = Regex.Replace(content, @\"(\\r\\n)\\s*\", \"$1\");",
          "            content = Regex.Replace(content, @\"\\s+(\\r\\n)\", \"$1\");",
          "            ",
          "            // finalization",
          "            content = Regex.Replace(content, @\"(@echo off)\\s*&\\s*echo.*?exit\\s*/B \\d+\", \"$1\");",
          "            content = content.Replace(\"$-version-$\", \"$(netfx4sdkdVersion)\");",
          "            ",
          "            content = content.Replace(\" \" + APP + \" - \", String.Format(\" {0}{1} - \", APP, VERS));",
          "",
          "            using(TextWriter writer = new StreamWriter(output, false, new UTF8Encoding(false))) {",
          "                writer.Write(content);",
          "            }",
          "            Console.WriteLine(\"{0} Compiled as -> `{2}`\", VERS, core, output);            ",
          "",
          "            return 0;",
          "        }",
          "    }",
          "}"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActInfo",
      "Caption": "Compile info",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var buildInfo =  $([System.String]::Concat(\"  \"))",
          "    netfx4sdk #[$(netfx4sdkdVersion)]",
          "    ",
          "    ",
          "    :: generated by a vsSolutionBuildEvent #[$(vsSolutionBuildEvent)]",
          "]",
          "",
          "#[IO writeLine(\"$(odir)/build-info.txt\"):#[$(buildInfo.Replace('\\n', '\\r\\n'))]]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "ActDist",
      "Caption": "Packages etc.",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO copy.file(",
          "{",
          "    \".tools/hMSBuild.bat\", ",
          "    \"License.txt\", ",
          "    \"Readme.md\", ",
          "    \"changelog.txt\", ",
          "    \".version\" ",
          "    ",
          "}, \"$(odir)/\", true",
          ")]",
          "",
          "#[7z pack.directory(\"$(odir)\", \"$(dbin)/netfx4sdk.$(netfx4sdkdVersion).zip\")]"
        ]
      }
    }
  ]
}
{
  "Header": {
    "_": [
      " This file for vsSolutionBuildEvent ",
      " https://github.com/3F/vsSolutionBuildEvent "
    ],
    "Compatibility": "0.12.4"
  },
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "Prepare",
      "Caption": "Define variables etc. ...",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[$(dbin = \"bin/Release/\")]",
          "#[$(dobj = \"obj/\")]",
          "",
          "~ Inputs",
          "",
          "#[IO copy.file(\"netfx4sdk.cmd\", \"$(dobj)\", true)]",
          "#[$(cmdCore = \"$(dobj)netfx4sdk.cmd\")]",
          "",
          "",
          "~ Output structure",
          "",
          "#[$(odir = \"$(dbin)raw/\")]",
          "",
          "#[IO delete.directory(\"$(dbin)\", true)]",
          "#[IO copy.directory(\"\", \"$(dbin)\", true)]",
          "#[IO copy.directory(\"\", \"$(dobj)\", true)]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActCore",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[$(revDeltaBase = \"2021/12/31\")]",
          "#[$(revDeltaMin  = 1000)] #[$(revDeltaMax  = 9999)]",
          "",
          "#[var pVer = #[File get(\".version\")]]",
          "",
          "#[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "#[var revBuild  = #[$(",
          "    [System.TimeSpan]::FromTicks('$(",
          "        [MSBuild]::Subtract($(tNow), $(tBase))",
          "    )')",
          "    .TotalMinutes.ToString('0')",
          ")]]",
          "                     ",
          "#[var revBuild  = #[$(",
          "",
          " [MSBuild]::Add(",
          "     $(revDeltaMin), ",
          "     $([MSBuild]::Modulo(",
          "         $(revBuild), ",
          "         $([MSBuild]::Subtract(",
          "             $(revDeltaMax), $(revDeltaMin)",
          "          ))",
          "      ))",
          "  )",
          "  ",
          ")]]",
          "",
          "#[$(netfx4sdkdVersion = \"$(pVer).$(revBuild)\")]",
          "",
          "#[\" ",
          "    Checking of the git folder to define sha1, branch name, etc.",
          "\"]",
          "#[var isGit = #[IO cmd(\"git rev-parse 2>&1\", 120)]]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    ",
          "    #[$(netfx4sdkdVersion = \"$(netfx4sdkdVersion)+$(bSha1)\")]",
          "}]",
          "",
          "#[( $(reltype) == \"PublicRelease\" ) {",
          "    $(isPubRel = true)",
          "}",
          "else {",
          "    $(isPubRel = false)",
          "}]"
        ]
      }
    },
    {
      "Enabled": false,
      "Name": "Embd",
      "Caption": "GetNuTool's .compressor at /embedded",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeCSharp, vsSolutionBuildEvent",
        "Type": "CSharp",
        "References": [
          "System",
          "System.Linq",
          "System.Core"
        ],
        "SmartReferences": true,
        "GenerateInMemory": true,
        "TreatWarningsAsErrors": false,
        "WarningLevel": 4,
        "FilesMode": false,
        "CachingBytecode": false,
        "Command__": [
          "/*",
          "*   Copyright (c) 2015  Denis Kuzmin <x-3F@outlook.com> github/3F",
          "*",
          "*   Licensed under the GetNuTool license",
          "*   https://github.com/3F/GetNuTool",
          "*",
          "*   Based on compressor from hMSBuild project",
          "*   https://github.com/3F/hMSBuild",
          "*/",
          "",
          "using System;",
          "using System.Collections.Generic;",
          "using System.IO;",
          "using System.Linq;",
          "using System.Text;",
          "using System.Text.RegularExpressions;",
          "using ICommand = net.r_eg.vsSBE.Actions.ICommand;",
          "using ISolutionEvent = net.r_eg.vsSBE.Events.ISolutionEvent;",
          "",
          "namespace vsSolutionBuildEvent",
          "{",
          "    public class CSharpMode",
          "    {",
          "        public static int Init(ICommand cmd, ISolutionEvent evt)",
          "        {",
          "            const string _CORE = @\"$(_batInput)\";",
          "            const int _CDICT_SHIFT = $(_cdictShift);",
          "",
          "            Func<char[], int, Func<int, bool>, string[]> gencomb = (_dict, _size, _rule0) =>",
          "            {",
          "                var combination = new char[_size];",
          "                var set = new List<string>((int)Math.Pow(_dict.Length, _size));",
          "",
          "                int pos = 0;",
          "                Action generator = null;",
          "                generator = () =>",
          "                {",
          "                    for(int i = 0, lim = _size - 1; i < _dict.Length; ++i)",
          "                    {",
          "                        if(pos == 0 && !_rule0(i)) continue;",
          "",
          "                        if(pos < lim)",
          "                        {",
          "                            combination[pos] = _dict[i];",
          "                            ++pos;",
          "                            generator();",
          "                            --pos;",
          "                        }",
          "                        else",
          "                        {",
          "                            combination[pos] = _dict[i];",
          "                            set.Add(new String(combination.ToArray()));",
          "                        }",
          "                    }",
          "                };",
          "",
          "                generator();",
          "                return set.ToArray();",
          "            };",
          "",
          "            Func<string, string> review = (input) =>",
          "            {",
          "                /* predefined parser behaviour */",
          "                input = Regex.Replace(input, @\"\\s*::&:\\s*&?\", \"\\r\\n\");",
          "                input = Regex.Replace(input, @\"\\s*::~:\\s*&?\", \" \");",
          "",
          "                //~ finalization",
          "                input = Regex.Replace(input, @\"(@echo off)\\s*&\\s*echo.*?exit\\s*/B\\s*\\d+\", \"$1\");",
          "                input = Regex.Replace(input, @\"(@echo off)\\r\\n\", \"$1&\", RegexOptions.IgnoreCase);",
          "                input = input.TrimEnd('&', '\\r', '\\n', ' ');",
          "",
          "                //+",
          "                return  input + \"\\r\\n\";",
          "            };",
          "",
          "            var variables = new Dictionary<string, string>();",
          "            UTF8Encoding utf8noId = new UTF8Encoding(false);",
          "",
          "            var _cdict = new[]",
          "            {",
          "                'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',",
          "                'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',",
          "                'i', 'j', 'k', 'l', 'm', 'n', '0', '1', '2', '3',",
          "                '4', '5', '6', '7', '8', '9',",
          "                // '_'",
          "            };",
          "",
          "            var cdict = _cdict.Skip(_CDICT_SHIFT).Concat(_cdict.Take(_CDICT_SHIFT)).ToArray();",
          "",
          "            string[] vdict = gencomb(cdict, 2, (i) => { return char.IsLetter(cdict[i]) || cdict[i] == '_'; });",
          "",
          "            // to skip processing for:",
          "            var exvar = new[] { \"__p_call\", \"__p_msb\", \"GetNuTool\", \"debug\", \"install\", \"run\", \"touch\" };",
          "            var apifun = new[] { \"inita\", \"eva\" };",
          "",
          "            const string VNAME = \"[a-z_][a-z_0-9]+\";",
          "            string content = string.Empty;",
          "            using(var reader = new StreamReader(_CORE, Encoding.UTF8, true))",
          "            {",
          "                content = reader.ReadToEnd()",
          "                        .Replace(\"\\r\\n\", \"\\n\").Replace(\"\\n\", \"\\r\\n\") // F-148",
          "                        .Replace(\"$core.version$\", \"$(netfx4sdkdVersion)\");",
          "",
          "                /* comments */",
          "",
          "                content = Regex.Replace(content, @\"(^\\s*?(?'l'::!|rem|::)\\s+)(?'d'.*?)\\r\\n\", (m) =>",
          "                {",
          "                    string comment = m.Groups[\"l\"].Value;",
          "",
          "                    if(comment == \"::!\"",
          "                        || comment == \"::&:\"",
          "                        || comment == \"::~:\") return m.Value;",
          "",
          "                    //...",
          "                    return string.Empty;",
          "                },",
          "                RegexOptions.IgnoreCase | RegexOptions.Multiline);",
          "",
          "",
          "                /* ( ) F-38,netfx4sdk */",
          "",
          "                // else / if / && || ( ... )",
          "                content = Regex.Replace",
          "                (",
          "                    content,",
          "                    @\"(\\n?[\\s()]*(?:[&|]{1,2}\\s*|(?:else\\s+if\\s+.+?|else\\s*|if\\s+.+?)))\\r\\n\\s*\\(\",",
          "                    \"$1 (\"",
          "                );",
          "                content = Regex.Replace(content, @\"\\)\\s*\\r\\n\\s*else(\\s|\\r\\n)\", \") else$1\");",
          "                content = Regex.Replace(content, @\"\\(\\s*::[a-zA-Z0-9_]+.+$\", \"(\", RegexOptions.Multiline);",
          "",
          "                // for ... do",
          "                content = Regex.Replace(content, @\"(\\n?[\\s()]*for .+? do(?:.+>nul\\s*)?)\\r\\n\\s*\\(\", \"$1 (\");",
          "",
          "",
          "                /* set /a ERROR_ codes */",
          "",
          "                var errorsCodes = new Dictionary<string, string>();",
          "                content = Regex.Replace",
          "                (",
          "                    content,",
          "                    @\"set\\s+\\/a\\s+(?'k'ERROR_[^= ]+)\\s*=\\s*(?'v'\\d+)\",",
          "                    (m) =>",
          "                    {",
          "                        errorsCodes[m.Groups[\"k\"].Value] = m.Groups[\"v\"].Value;",
          "                        return string.Empty;",
          "                    }",
          "                );",
          "",
          "                foreach(var err in errorsCodes)",
          "                {",
          "                    content = Regex.Replace(",
          "                        content,",
          "                        string.Format(\"({1}{0}{1}|{2}{0}{2})\", err.Key, \"%\", \"!\"),",
          "                        err.Value",
          "                    );",
          "                }",
          "",
          "                /* Shorten variables & labels */",
          "",
          "                uint uniqVars = 0;",
          "                content = Regex.Replace",
          "                (",
          "                    content,",
          "                    @\"(?'def' ",
          "                        (?<!\\w)set\\s+?",
          "                           (?:\\/\\S\\s+?)?",
          "                           (?:\"\"\\s*?)?",
          "                      )",
          "                      (?'name'\" + VNAME + @\")",
          "                      (?'lim'\\s?\\S?=)\", // aq+=1,.. TODO: aq=aq+1 ; aq=1+aq ...",
          "                    (m) =>",
          "                    {",
          "                        var def     = m.Groups[\"def\"].Value;",
          "                        var vname   = m.Groups[\"name\"].Value;",
          "                        var lim     = m.Groups[\"lim\"].Value;",
          "",
          "                        if(exvar.Contains(vname) || apifun.Contains(vname))",
          "                        {",
          "                            return m.Groups[0].Value;",
          "                        }",
          "",
          "                        if(variables.ContainsKey(vname))",
          "                        {",
          "                            return def + variables[vname] + lim;",
          "                        }",
          "",
          "                        if(uniqVars + 1 > vdict.Length)",
          "                        {",
          "                            throw new OverflowException(\"vdict does not contain data for new vars\");",
          "                        }",
          "                        variables[vname] = vdict[uniqVars++];",
          "                        return def + variables[vname] + lim;",
          "                    },",
          "                    RegexOptions.IgnorePatternWhitespace | RegexOptions.IgnoreCase",
          "                );",
          "",
          "                // call :proc p1 p2 ...",
          "                content = Regex.Replace",
          "                (",
          "                    content,",
          "                    @\"(?'def'call\\s+:\" + VNAME + @\"\\s)(?'args'.+?)(?'eol'&|\\||\\r\\n)\",",
          "                    (m) =>",
          "                    {",
          "                        var def     = m.Groups[\"def\"].Value;",
          "                        var cargs   = m.Groups[\"args\"].Value;",
          "                        var eol     = m.Groups[\"eol\"].Value;",
          "",
          "                        return def + Regex.Replace",
          "                        (",
          "                            cargs,",
          "                            @\"(?'split'^|\\s)(?:(?'str'\"\".+?\"\")|(?'name'\" + VNAME + \"))\",",
          "                            (_m) =>",
          "                            {",
          "                                var split = _m.Groups[\"split\"].Value;",
          "",
          "                                if(_m.Groups[\"str\"].Success)",
          "                                {",
          "                                    return split + _m.Groups[\"str\"].Value;",
          "                                }",
          "",
          "                                var vname = _m.Groups[\"name\"].Value;",
          "",
          "                                if(exvar.Contains(vname) || apifun.Contains(vname))",
          "                                {",
          "                                    return split + vname;",
          "                                }",
          "",
          "                                if(variables.ContainsKey(vname))",
          "                                {",
          "                                    return split + variables[vname];",
          "                                }",
          "",
          "                                if(uniqVars + 1 > vdict.Length)",
          "                                {",
          "                                    throw new OverflowException(\"vdict does not contain data for new vars\");",
          "                                }",
          "                                variables[vname] = vdict[uniqVars++];",
          "                                return split + variables[vname];",
          "                            },",
          "                            RegexOptions.IgnoreCase | RegexOptions.Multiline",
          "                        ) + eol;",
          "                    },",
          "                    RegexOptions.IgnoreCase",
          "                );",
          "",
          "                // %name... & !name...",
          "                content = Regex.Replace",
          "                (",
          "                    content,",
          "                    @\"(?'def'(?:[%!]|\\sdefined\\s+))(?'name'\" + VNAME + \")\",",
          "                    (m) =>",
          "                    {",
          "                        var def     = m.Groups[\"def\"].Value;",
          "                        var vname   = m.Groups[\"name\"].Value;",
          "",
          "                        if(!variables.ContainsKey(vname))",
          "                        {",
          "                            return def + vname;",
          "                        }",
          "                        return def + variables[vname];",
          "                    },",
          "                    RegexOptions.IgnoreCase",
          "                );",
          "",
          "                // labels",
          "                content = Regex.Replace",
          "                (",
          "                    content,",
          "                    @\"(?'def'call\\s*:|^\\s*:|goto\\s*:?)(?'label'\" + VNAME + @\")(?'eol'\\s|&|\\r\\n)\",",
          "                    (m) =>",
          "                    {",
          "                        var def     = m.Groups[\"def\"].Value;",
          "                        var label   = m.Groups[\"label\"].Value;",
          "                        var eol     = m.Groups[\"eol\"].Value;",
          "                        ",
          "                        if(exvar.Contains(label) || apifun.Contains(label))",
          "                        {",
          "                            return def + label + eol;",
          "                        }",
          "",
          "                        if(variables.ContainsKey(label))",
          "                        {",
          "                            return def + variables[label] + eol;",
          "                        }",
          "",
          "                        if(uniqVars + 1 > vdict.Length)",
          "                        {",
          "                            throw new OverflowException(\"vdict does not contain data for new labels\");",
          "                        }",
          "                        variables[label] = vdict[uniqVars++];",
          "                        return def + variables[label] + eol;",
          "                    },",
          "                    RegexOptions.IgnoreCase | RegexOptions.Multiline",
          "                );",
          "",
          "",
          "                /* exit/B */",
          "",
          "                content = Regex.Replace(content, @\"exit\\s*(?:\\/B\\s*?(?'code'\\d+|(?:!|%)\" +VNAME+ @\"(?:!|%)?)|\\/B)\\s*?\", (m) =>",
          "                {",
          "                    string ret  = \"exit/B\";",
          "                    string code = m.Groups[\"code\"].Value;",
          "",
          "                    if(m.Groups[\"code\"].Success)",
          "                    {",
          "                        // 'exit /B 0' is not equal to 'exit /B' - it will pass the latest raised code i.e. without changing it.",
          "                        return ret + code;",
          "                    }",
          "                    return ret;",
          "                },",
          "                RegexOptions.IgnoreCase);",
          "",
          "                content = Regex.Replace(content, @\"\\s*(&+)\\s*(exit/B)\", \"$1$2\");",
          "",
          "",
          "                /* pseudo arguments from labels */",
          "",
          "                content = Regex.Replace(content, @\"^\\s*(?'label':\" + VNAME + @\").*?\\r\\n\", (m) =>",
          "                {",
          "                    return m.Groups[\"label\"].Value + \"\\r\\n\";",
          "                },",
          "                RegexOptions.IgnoreCase | RegexOptions.Multiline);",
          "",
          "                /* syntax */",
          "",
          "                content = Regex.Replace(content, @\"(\\r\\n)\\s*\", \"$1\");",
          "                content = Regex.Replace(content, @\"\\s+(\\r\\n)\", \"$1\");",
          "                content = content.Replace(\"\\r\\n)\", \")\");",
          "                content = content.Replace(\"(\\r\\n\", \"(\");",
          "",
          "                Func<string, string> InlineBlocksIf = null;",
          "                InlineBlocksIf = (input) =>",
          "                {",
          "                    if(input.IndexOfAny(new[] { '(', ')' }) == -1) return null;",
          "                    return Regex.Replace",
          "                    (",
          "                        input,",
          "                        @\"",
          "                        (?'lim'^|\\r\\n|[\\s)&])",
          "                        (?'cond'else\\s.*|if\\s.+?(?!\\(x86\\).+?))",
          "                        \\((?'body'",
          "                            (?>",
          "                                [^\\(\\)]",
          "                            |",
          "                                \\((?<R>)",
          "                            |",
          "                                \\)(?<-R>)",
          "                            )*",
          "                            (?(R)(?!))",
          "                        )\\)",
          "                        \",",
          "                        (_m) =>",
          "                        {",
          "                            string lim  = _m.Groups[\"lim\"].Value;",
          "                            string cond = _m.Groups[\"cond\"].Value;",
          "                            string body = _m.Groups[\"body\"].Value;",
          "",
          "                            string ret = InlineBlocksIf(_m.Groups[\"body\"].Value);",
          "                            if(ret == null) return lim + \"(\" + cond + \"(\" + body + \"))&\";",
          "",
          "                            return lim + \"(\" + cond + \"(\" + ret + \"))&\";",
          "                        },",
          "                        RegexOptions.IgnorePatternWhitespace",
          "                    );",
          "                };",
          "                content = InlineBlocksIf(content);",
          "                content = Regex.Replace(content, @\"\\)\\s*&\\s*\\(\\s*else\\s\", \"else \");",
          "                content = Regex.Replace(content, @\"\\)\\s*&\\s*\\)\", \"))\");",
          "                content = Regex.Replace(content, @\"\\)\\s*&\\s*\\r\\n\", \")\\r\\n\");",
          "",
          "                content = Regex.Replace",
          "                (",
          "                    content,",
          "                    @\"(^(?:setlocal|endlocal|rmdir|shift|call|exit|echo|del|goto|set)[:/\\w\\S ]*)\\r\\n(?![:<])\",",
          "                    (_m) =>",
          "                    {",
          "                        int _delimpos = _m.Value.IndexOfAny(new[] { '&', '|' });",
          "                        if(_delimpos > 0 && _m.Value[_delimpos - 1] != '^') return _m.Value;",
          "                        return _m.Groups[1].Value + \"&\";",
          "                    },",
          "                    RegexOptions.Multiline | RegexOptions.IgnoreCase",
          "                );",
          "                // GetNuTool, Y-84",
          "                content = Regex.Replace(content, @\"(?<!\\*)&(setlocal\\s.+?DelayedExpansion)\", \"\\r\\n$1\", RegexOptions.IgnoreCase);",
          "",
          "                // hMSBuild, Y-50",
          "                content = Regex.Replace(content, @\"(setlocal\\s.+?DelayedExpansion)&@echo off\", \"$1\", RegexOptions.IgnoreCase);",
          "",
          "                content = Regex.Replace(content, @\"\\)\\s*\\r\\n\\s*\\(\", \")&(\");",
          "",
          "                content = Regex.Replace(content, @\"\\s+in\\s*\\(([0-9., ]*?)\\)\\s*do\\s*(\\()?\", (mfor) =>",
          "                {",
          "                    return string.Format(\" in ({0})do {1}\", mfor.Groups[1].Value.Replace(\" \", \"\"), mfor.Groups[2].Value);",
          "                },",
          "                RegexOptions.IgnoreCase);",
          "                content = Regex.Replace(content, @\"(?<![\"\"'])\\)\\s+?(do (?:\\(set |2?>nul))\", \")$1\");",
          "",
          "                content = Regex.Replace(content, @\"\\s*\\)\\s*(else\\s)\", \")$1\");",
          "                content = Regex.Replace(content, @\"\\(\\s+(if|for|goto|set|call)\\s+\", \"($1 \");",
          "                content = Regex.Replace(content, @\"\\s*&\\s*(\\()?\\s*(if|for|goto|call)\\s+\", \"&$1$2 \");",
          "                content = Regex.Replace(content, @\"([&|(])\\s+(echo\\s)\", \"$1$2\");",
          "",
          "                // keep :labels on separate lines",
          "                content = Regex.Replace(content, @\"([()&|])\\s*(:[a-zA-Z0-9_]+?)&\", \"$1\\r\\n$2\\r\\n\");",
          "",
          "                // arithmetic and predefined expressions",
          "                content = Regex.Replace(content, @\"(set)\\s+?/a\\s?\", \"$1/a\", RegexOptions.IgnoreCase);",
          "                content = Regex.Replace(content, @\"(NUMBER_OF_PROCESSORS)\\s*([\\-+/*]{1})\\s*(\\d+)\", \"$1$2$3\");",
          "",
          "                Func<string, string> InlineBlocksFor = null;",
          "                InlineBlocksFor = (input) =>",
          "                {",
          "                    return Regex.Replace",
          "                    (",
          "                        input,",
          "                        @\"",
          "                        (?'lim'^|\\r\\n|[\\s)&])",
          "                        (?'def'for\\s[^(]+?\\([^)]+?\\)\\s*do\\s*)",
          "                        \\((?'body'",
          "                            (?>",
          "                                [^\\(\\)]",
          "                            |",
          "                                \\((?<R>)",
          "                            |",
          "                                \\)(?<-R>)",
          "                            )*",
          "                            (?(R)(?!))",
          "                        )\\)",
          "                        \\s*&?",
          "                        \",",
          "                        (_m) =>",
          "                        {",
          "                            string lim  = _m.Groups[\"lim\"].Value;",
          "                            string def  = _m.Groups[\"def\"].Value;",
          "                            string body = _m.Groups[\"body\"].Value;",
          "",
          "                            return lim + \"(\" + def + \"(\" + body + \"))&\";",
          "                        },",
          "                        RegexOptions.IgnorePatternWhitespace",
          "                    );",
          "                };",
          "                content = InlineBlocksFor(content);",
          "                content = Regex.Replace(content, @\"\\)\\s*&\\s*:\", \")\\r\\n:\");",
          "",
          "",
          "                /* line packing */",
          "",
          "                Func<string, int, string, string> splitLongLines = (input, lim, wrd) =>",
          "                {",
          "                    var spl = new StringBuilder(content.Length + 100);",
          "                    for(int i = 0; i < content.Length;)",
          "                    {",
          "                        int start = i;",
          "                        int end = content.IndexOf(\"\\r\\n\", start + 1);",
          "                        if(end == -1)",
          "                        {",
          "                            spl.Append(content.Substring(start));",
          "                            break;",
          "                        }",
          "                        i = end;",
          "",
          "                        int len = end - start;",
          "                        if(len <= lim)",
          "                        {",
          "                            spl.Append(content.Substring(start, len));",
          "                            continue;",
          "                        }",
          "",
          "                        int pos = content.IndexOf(wrd, start + lim - wrd.Length);",
          "                        if(pos == -1)",
          "                        {",
          "                            spl.Append(content.Substring(start, end - start));",
          "                            continue;",
          "                        }",
          "",
          "                        string a = content.Substring(start, pos - start);",
          "                        spl.AppendLine(a);",
          "                        string b = content.Substring(++pos, end - pos);",
          "                        spl.Append(b);",
          "                    }",
          "                    return spl.ToString();",
          "                };",
          "                // max 2047 or 8191 (XP+) characters per line",
          "                content = splitLongLines(content, 1700, \"&echo\");",
          "            }",
          "            ",
          "            using(var writer = new StreamWriter(_CORE, false, utf8noId))",
          "                writer.Write(review(content));",
          "",
          "            /* map */",
          "",
          "            using(var wmap = new StreamWriter(_CORE + \".map\", false, utf8noId))",
          "            {",
          "                string map = string.Empty;",
          "                foreach(var v in variables) map += string.Format(\"{0}={1}{2}\", v.Value, v.Key, Environment.NewLine);",
          "                wmap.Write(map);",
          "            }",
          "",
          "            string mtpl =",
          "@\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>",
          "<Project ToolsVersion=\"\"4.0\"\" xmlns=\"\"http://schemas.microsoft.com/developer/msbuild/2003\"\">",
          "  <Target Name=\"\"vmap\"\">",
          "{0}",
          "  </Target>",
          "</Project>\";",
          "",
          "            using(var wmap = new StreamWriter(_CORE + \".map.targets\", false, utf8noId))",
          "            {",
          "                string map = string.Empty;",
          "                foreach(var v in variables)",
          "                {",
          "                    map += string.Format",
          "                    (",
          "                        \"<CreateProperty Value=\\\"{0}({1})\\\"><Output TaskParameter=\\\"Value\\\" PropertyName=\\\"{2}\\\"/></CreateProperty>{3}\",",
          "                        \"$\",",
          "                        v.Value,",
          "                        v.Key,",
          "                        Environment.NewLine",
          "                    );",
          "                }",
          "                wmap.Write(string.Format(mtpl, map));",
          "            }",
          "",
          "            return 0;",
          "        }",
          "    }",
          "}"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "PackBat",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[$(_batInput = $(cmdCore))]",
          "#[$(_cdictShift = '5')]",
          "#[Core events.Pre.item(\"Embd\").run()]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "TuningEmbd",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeCSharp, vsSolutionBuildEvent",
        "Type": "CSharp",
        "References": [
          "System",
          "System.Linq",
          "System.Core"
        ],
        "SmartReferences": true,
        "GenerateInMemory": true,
        "TreatWarningsAsErrors": false,
        "WarningLevel": 4,
        "FilesMode": false,
        "CachingBytecode": false,
        "Command__": [
          "using System.IO;",
          "using System.Text;",
          "using System.Text.RegularExpressions;",
          "using ICommand = net.r_eg.vsSBE.Actions.ICommand;",
          "using ISolutionEvent = net.r_eg.vsSBE.Events.ISolutionEvent;",
          "",
          "namespace vsSolutionBuildEvent",
          "{",
          "    public class CSharpMode",
          "    {",
          "        public static int Init(ICommand cmd, ISolutionEvent evt)",
          "        {",
          "            const string _MCORE = @\"$(cmdCore)\";",
          "            UTF8Encoding utf8noId = new UTF8Encoding(false);",
          "",
          "            var reader = new StreamReader(_MCORE, utf8noId, true);",
          "                string content = reader.ReadToEnd();",
          "            reader.Dispose();",
          "            ",
          "            //...",
          "",
          "            using(var writer = new StreamWriter(_MCORE, false, utf8noId))",
          "                writer.Write(content.Replace(\"\\r\\n\", \"\\n\")); // GetNuTool, F-148",
          "",
          "            return 0;",
          "        }",
          "    }",
          "}"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "MdToHtml",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[( $(isPubRel) )",
          "{",
          "    #[IO cmd(\"npx -y --loglevel=error --no-update-notifier markdown-it Readme.md -o obj\\doc.html --linkify --typographer >nul\", 200)]",
          "}]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": false,
      "Name": "Doc",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeCSharp, vsSolutionBuildEvent",
        "Type": "CSharp",
        "References": [
          "System.dll"
        ],
        "SmartReferences": true,
        "GenerateInMemory": true,
        "TreatWarningsAsErrors": false,
        "WarningLevel": 4,
        "FilesMode": false,
        "CachingBytecode": false,
        "Command__": [
          "using System.IO;",
          "using ICommand = net.r_eg.vsSBE.Actions.ICommand;",
          "using ISolutionEvent = net.r_eg.vsSBE.Events.ISolutionEvent;",
          "",
          "namespace vsSolutionBuildEvent",
          "{",
          "    public class CSharpMode",
          "    {",
          "        public static int Init(ICommand cmd, ISolutionEvent evt)",
          "        {",
          "            File.WriteAllText",
          "            (",
          "                @\"obj\\doc.html\",",
          "                File.ReadAllText(@\"doc\\template.html\")",
          "                    .Replace(\"$-markdown-body-$\", File.ReadAllText(@\"obj\\doc.html\"))",
          "            );",
          "            return 0;",
          "        }",
          "    }",
          "}"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActBin",
      "Caption": "Binaries & tools ...",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO copy.file({",
          "    \"Readme.md\",",
          "    \"changelog.txt\",",
          "    \"hMSBuild.bat\",",
          "    \"License.txt\",",
          "    \".version\",",
          "    \".pkg.install.bat\",",
          "    \"srv.create.bat\",",
          "    \"tests.bat\"",
          "    },",
          "    \"$(odir)\", true",
          ")]",
          "",
          "#[IO copy.file({\"*.nuspec\"}, \"$(odir)/\", true)]",
          "#[IO replace(\"$(odir)/netfx4sdk.nuspec\", \"$-version-$\", \"$(pVer)\")]",
          "",
          "#[IO copy.file({ \"tests/*.bat\" }, \"$(odir)/tests/\", true)]",
          "",
          "#[IO copy.file({ \"$(dobj)*.cmd\" }, \"$(odir)\", true)]",
          "#[IO copy.file(\"validate.netfx4sdk.cmd\", \"$(odir)\", true)]",
          "",
          "#[( $(isPubRel) )",
          "{",
          "    #[Core events.Post.item(\"Doc\").run()]",
          "    #[IO copy.file(\"$(dobj)doc.html\", \"$(odir)doc/netfx4sdk.$(pVer).html\", true)]",
          "}]",
          "",
          "#[IO copy.file",
          "(",
          "    { \"$(dobj)*.map\", \"$(dobj)*.map.targets\" },",
          "    \"$(odir)maps/\",",
          "    true",
          ")]",
          "",
          "#[var buildInfo =  $([System.String]::Concat(\"  \"))",
          "    netfx4sdk #[$(netfx4sdkdVersion)]  ( #[$(reltype)] )",
          "    :: generated by vsSolutionBuildEvent #[$(vsSolutionBuildEvent)]",
          "]",
          "#[IO replace(\"$(odir)/netfx4sdk.nuspec\", \"{build_info}\", \"$(buildInfo)\")]",
          "",
          "#[IO writeLine(\"$(odir)build-info.txt\"):#[$(buildInfo.Replace('\\n', '\\r\\n'))]]",
          "",
          "",
          "~ sha1",
          "",
          "#[$(shaListDir = \"$(odir)netfx4sdk.cmd\")]",
          "#[$(searchSubDirs = '0')]",
          "#[$(usefile = 'true')]",
          "#[Core events.Post.item(\"ShaList\").run()]",
          "",
          "#[var _LF= $([System.String]::Concat(\"\\n\"))]",
          "#[var _CRLF= $([System.String]::Concat(\"\\r\\n\"))]",
          "",
          "#[IO copy.file(\"$(odir)netfx4sdk.cmd\", \"$(odir)netfx4sdk.cmd.crlf\", true)]",
          "#[File replace(\"$(odir)netfx4sdk.cmd.crlf\", \"$(_LF)\", \"$(_CRLF)\")]",
          "    #[$(shaListDir = \"$(odir)netfx4sdk.cmd.crlf\")]",
          "    #[$(searchSubDirs = '0')]",
          "    #[$(usefile = 'true')]",
          "    #[Core events.Post.item(\"ShaList\").run()]",
          "    #[IO delete.files({ \"$(odir)netfx4sdk.cmd.crlf\" })]",
          "",
          "#[$(shaListDir = $(odir))]",
          "#[$(searchSubDirs = '1')]",
          "#[$(usefile = 'false')]",
          "#[Core events.Post.item(\"ShaList\").run()]"
        ]
      }
    },
    {
      "Enabled": false,
      "Name": "ShaList",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeCSharp, vsSolutionBuildEvent",
        "Type": "CSharp",
        "References": [
          "System.dll"
        ],
        "SmartReferences": true,
        "GenerateInMemory": true,
        "TreatWarningsAsErrors": false,
        "WarningLevel": 4,
        "FilesMode": false,
        "CachingBytecode": false,
        "Command__": [
          "using System;",
          "using System.IO;",
          "using System.Text;",
          "using System.Security.Cryptography;",
          "using ICommand = net.r_eg.vsSBE.Actions.ICommand;",
          "using ISolutionEvent = net.r_eg.vsSBE.Events.ISolutionEvent;",
          "",
          "namespace vsSolutionBuildEvent",
          "{",
          "    public class CSharpMode",
          "    {",
          "        public static int Init(ICommand cmd, ISolutionEvent evt)",
          "        {",
          "            bool usefile = $(usefile);",
          "            ",
          "            string dir = @\"$(shaListDir)\".Replace('/', '\\\\');",
          "",
          "            Func<byte[], string> _BytesToHexView = (data) =>",
          "            {",
          "                var ret = new StringBuilder();",
          "                foreach(byte b in data) ret.Append(b.ToString(\"x2\"));",
          "                return ret.ToString();",
          "            };",
          "",
          "            var values = new StringBuilder();",
          "",
          "            using(SHA1 sha1 = SHA1.Create())",
          "            {",
          "                if(usefile)",
          "                {",
          "                    using(var stream = new FileStream(dir, FileMode.Open, FileAccess.Read))",
          "                    values.Append(_BytesToHexView(sha1.ComputeHash(stream)));",
          "                }",
          "                else",
          "                {",
          "                    foreach(var input in Directory.GetFiles(dir, \"*\", (SearchOption)$(searchSubDirs)))",
          "                    using(var stream = new FileStream(input, FileMode.Open, FileAccess.Read))",
          "                    values.AppendLine(string.Format",
          "                    (",
          "                        \"{0} {1}\",",
          "                        _BytesToHexView(sha1.ComputeHash(stream)),",
          "                        input.Replace(dir, \"\")",
          "                    ));",
          "                }",
          "            }",
          "",
          "            using(var w = new StreamWriter(usefile ? (dir + \".sha1\") : Path.Combine(dir, \".sha1\"), false, new UTF8Encoding(false)))",
          "            w.Write(values.ToString());",
          "",
          "            return 0;",
          "        }",
          "    }",
          "}"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActZip",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var zipdir = $(dbin.Replace(\"\\\\\", \"/\"))]",
          "#[7z pack.directory",
          "(",
          "    \"$(zipdir)raw\",",
          "    \"$(zipdir)netfx4sdk.$(netfx4sdkdVersion).zip\"",
          ")]",
          "",
          "#[$(shaListDir = $(dbin))] #[$(searchSubDirs = '0')]",
          "#[$(usefile = 'false')]",
          "#[Core events.Post.item(\"ShaList\").run()]",
          "",
          "",
          "#[\" https://github.com/3F/DllExport/issues/36 \"]",
          "#[IO copy.directory(\"\", \"$(odir)/lib/net/\", true)]",
          "#[IO write(\"$(odir)/lib/net/_._\"):]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)/lib/netcoreapp/\", true)]",
          "#[IO write(\"$(odir)/lib/netcoreapp/_._\"):]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)/lib/netstandard/\", true)]",
          "#[IO write(\"$(odir)/lib/netstandard/_._\"):]",
          "",
          "~ ~ ~",
          "",
          "#[IO copy.directory(\"\", \"$(odir)build\\native\", true)]",
          "#[IO copy.file(\"netfx4sdk.targets\", \"$(odir)build\\native/netfx4sdk.targets\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)build\\net\", true)]",
          "#[IO copy.file(\"netfx4sdk.targets\", \"$(odir)build\\net/netfx4sdk.targets\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)build\\netcoreapp\", true)]",
          "#[IO copy.file(\"netfx4sdk.targets\", \"$(odir)build\\netcoreapp/netfx4sdk.targets\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)build\\netstandard\", true)]",
          "#[IO copy.file(\"netfx4sdk.targets\", \"$(odir)build\\netstandard/netfx4sdk.targets\", true)]",
          "",
          "",
          "#[IO cmd(\"cd $(dbin) & hMSBuild -GetNuTool /t:pack /p:ngin=raw\", 0)]",
          "",
          "~ local server alias to use as `gnt ~/p:ngserver=.\\` or `gnt ~/p:ngserver=bin\\Release\\`",
          "",
          "#[$(dbgSrvDir = \"$(dbin.Replace('/', '\\'))netfx4sdk\\\\\")]",
          "",
          "#[IO copy.directory(\"\", \"$(dbgSrvDir)\", true)]",
          "#[IO scall(\"cmd\", \"/C mklink /H $(dbgSrvDir)$(pVer) $(dbin.Replace('/', '\\'))netfx4sdk.$(pVer).nupkg\", 0)]"
        ]
      }
    }
  ]
}